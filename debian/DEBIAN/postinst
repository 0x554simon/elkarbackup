#!/bin/sh
set -e

# Source debconf library.
. /usr/share/debconf/confmodule

db_get tknikabackups/dbhost
dbhost="$RET"
db_get tknikabackups/dbname
dbname="$RET"
db_get tknikabackups/dbusername
dbusername="$RET"
db_get tknikabackups/dbuserpassword
dbuserpassword="$RET"

if ! mysql -u"$dbusername" -p"$dbuserpassword" -h"$dbhost" "$dbname" </dev/null
then
    db_input high tknikabackups/dbadminname
    db_input high tknikabackups/dbadminpassword
    db_go
    db_get tknikabackups/dbadminname
    dbadminusername="$RET"
    db_reset tknikabackups/dbadminname
    db_get tknikabackups/dbadminpassword
    dbadminpassword="$RET"
    db_reset tknikabackups/dbadminpassword
    echo "Attempting to create DB $dbname and user $dbusername in $dbhost"
    echo 'Create database'
    echo "CREATE DATABASE IF NOT EXISTS $dbname DEFAULT CHARACTER SET utf8;" | mysql -u"$dbadminusername" -p"$dbadminpassword" -h"$dbhost"
    echo 'Create user'
    if [ "$dbhost" = localhost ]
    then
        user="'$dbusername'@localhost"
    else
        user="'$dbusername'"
    fi
    echo 'Create user'
    echo "CREATE USER $user IDENTIFIED BY '$dbuserpassword';" | mysql -u"$dbadminusername" -p"$dbadminpassword" -h"$dbhost" || true
    echo "GRANT ALL ON $dbname.* TO $user;" | mysql -u"$dbadminusername" -p"$dbadminpassword" -h"$dbhost" || true
    echo 'Configure parameters'
    sed -i "s#database_host:.*#database_host: $dbhost#"                 /etc/tknikabackups/parameters.yml
    sed -i "s#database_name:.*#database_name: $dbname#"                 /etc/tknikabackups/parameters.yml
    sed -i "s#database_user:.*#database_user: $dbusername#"             /etc/tknikabackups/parameters.yml
    sed -i "s#database_password:.*#database_password: $dbuserpassword#" /etc/tknikabackups/parameters.yml
else
    echo DB seems to be ready
fi
echo Update DB
php /usr/share/tknikabackups/app/console doctrine:migrations:migrate --no-interaction || true
echo Create root user
php /usr/share/tknikabackups/app/console tknikabackups:create_admin || true
echo Clean cache
php /usr/share/tknikabackups/app/console --env=prod cache:clear || true

db_get tknikabackups/backupsusername
username="$RET"
sed -i "s/www-data/$username/" /etc/cron.d/tknikabackups
if test "x$username" != xwww-data -a "x$username" != x
then
    if test x`grep $username /etc/passwd` = x
    then
        adduser --system --home /var/lib/tknikabackups --group $username
    fi
    if [ ! -f /var/lib/tknikabackups/.ssh/id_rsa ]
    then
        mkdir /var/lib/tknikabackups/.ssh || true
        ssh-keygen -t rsa -N '' -C 'Automatically generated key for tknikabackups.' -f /var/lib/tknikabackups/.ssh/id_rsa
        chown -R $username.$username /var/lib/tknikabackups/.ssh
    fi
    # set rwx permissions for www-data and the backup user in the cache and log directories
    # as described in http://symfony.com/doc/current/book/installation.html#configuration-and-setup
    setfacl  -R -m u:www-data:rwx -m u:$username:rwx /var/cache/tknikabackups
    setfacl -dR -m u:www-data:rwx -m u:$username:rwx /var/cache/tknikabackups
    setfacl  -R -m u:www-data:rwx -m u:$username:rwx /var/log/tknikabackups
    setfacl -dR -m u:www-data:rwx -m u:$username:rwx /var/log/tknikabackups
    # the same in the spool directory
    setfacl  -R -m u:www-data:rwx -m u:$username:rwx /var/spool/tknikabackups
    setfacl -dR -m u:www-data:rwx -m u:$username:rwx /var/spool/tknikabackups
fi
chown -R $username.$username /var/cache/tknikabackups /var/log/tknikabackups /var/spool/tknikabackups /etc/tknikabackups/parameters.yml

a2ensite tknikabackups
a2enmod  rewrite
# reload apache
if [ -f /etc/init.d/apache2 ]
then
    invoke-rc.d apache2 reload
fi

db_stop
